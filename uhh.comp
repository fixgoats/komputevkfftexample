std::string my_shader_glsl_src = R"(
#version 450

layout (local_size_x = 1) in;

layout (std430, binding = 0) buffer particles { vec2 ps[];};

float normSqr(vec2 x) {
    return x[0]*x[0] + x[1]*x[1];
}

mat3x2 f(mat3x2 y) {
    return vec2(
            y[1],
            -9.8
            );
}

vec2 cRK4(float h, vec2 v) {
    const vec2 k1 = f(v);
    const vec2 k2 = f(v + 0.5 * h * k1);
    const vec2 k3 = f(v + 0.5 * h * k2);
    const vec2 k4 = f(v + h * k3);

    return v + h * (1./6. * k1 + 1./3. * k2 + 1./3. * k3 + 1./6. * k4);
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    for (int i = 0; i < 1000; i++) {
        ps[index] = cRK4(0.01, ps[index]);
    }
}
)";
